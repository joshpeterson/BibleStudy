// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TranslationBuffer.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace BibleDatabase {

namespace {

const ::google::protobuf::Descriptor* VerseBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerseBuffer_reflection_ = NULL;
const ::google::protobuf::Descriptor* TranslationBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TranslationBuffer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TranslationBuffer_2eproto() {
  protobuf_AddDesc_TranslationBuffer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TranslationBuffer.proto");
  GOOGLE_CHECK(file != NULL);
  VerseBuffer_descriptor_ = file->message_type(0);
  static const int VerseBuffer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerseBuffer, book_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerseBuffer, chapter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerseBuffer, verse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerseBuffer, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerseBuffer, unique_id_),
  };
  VerseBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VerseBuffer_descriptor_,
      VerseBuffer::default_instance_,
      VerseBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerseBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerseBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VerseBuffer));
  TranslationBuffer_descriptor_ = file->message_type(1);
  static const int TranslationBuffer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslationBuffer, long_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslationBuffer, short_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslationBuffer, verse_),
  };
  TranslationBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TranslationBuffer_descriptor_,
      TranslationBuffer::default_instance_,
      TranslationBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslationBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslationBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TranslationBuffer));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TranslationBuffer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VerseBuffer_descriptor_, &VerseBuffer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TranslationBuffer_descriptor_, &TranslationBuffer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TranslationBuffer_2eproto() {
  delete VerseBuffer::default_instance_;
  delete VerseBuffer_reflection_;
  delete TranslationBuffer::default_instance_;
  delete TranslationBuffer_reflection_;
}

void protobuf_AddDesc_TranslationBuffer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027TranslationBuffer.proto\022\rBibleDatabase"
    "\"\\\n\013VerseBuffer\022\014\n\004book\030\001 \002(\t\022\017\n\007chapter"
    "\030\002 \002(\005\022\r\n\005verse\030\003 \002(\005\022\014\n\004text\030\004 \002(\t\022\021\n\tu"
    "nique_id\030\005 \002(\005\"e\n\021TranslationBuffer\022\021\n\tl"
    "ong_name\030\001 \002(\t\022\022\n\nshort_name\030\002 \002(\t\022)\n\005ve"
    "rse\030\003 \003(\0132\032.BibleDatabase.VerseBuffer", 237);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TranslationBuffer.proto", &protobuf_RegisterTypes);
  VerseBuffer::default_instance_ = new VerseBuffer();
  TranslationBuffer::default_instance_ = new TranslationBuffer();
  VerseBuffer::default_instance_->InitAsDefaultInstance();
  TranslationBuffer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TranslationBuffer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TranslationBuffer_2eproto {
  StaticDescriptorInitializer_TranslationBuffer_2eproto() {
    protobuf_AddDesc_TranslationBuffer_2eproto();
  }
} static_descriptor_initializer_TranslationBuffer_2eproto_;


// ===================================================================

const ::std::string VerseBuffer::_default_book_;
const ::std::string VerseBuffer::_default_text_;
#ifndef _MSC_VER
const int VerseBuffer::kBookFieldNumber;
const int VerseBuffer::kChapterFieldNumber;
const int VerseBuffer::kVerseFieldNumber;
const int VerseBuffer::kTextFieldNumber;
const int VerseBuffer::kUniqueIdFieldNumber;
#endif  // !_MSC_VER

VerseBuffer::VerseBuffer() {
  SharedCtor();
}

void VerseBuffer::InitAsDefaultInstance() {
}

VerseBuffer::VerseBuffer(const VerseBuffer& from) {
  SharedCtor();
  MergeFrom(from);
}

void VerseBuffer::SharedCtor() {
  _cached_size_ = 0;
  book_ = const_cast< ::std::string*>(&_default_book_);
  chapter_ = 0;
  verse_ = 0;
  text_ = const_cast< ::std::string*>(&_default_text_);
  unique_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerseBuffer::~VerseBuffer() {
  SharedDtor();
}

void VerseBuffer::SharedDtor() {
  if (book_ != &_default_book_) {
    delete book_;
  }
  if (text_ != &_default_text_) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* VerseBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerseBuffer_descriptor_;
}

const VerseBuffer& VerseBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TranslationBuffer_2eproto();  return *default_instance_;
}

VerseBuffer* VerseBuffer::default_instance_ = NULL;

VerseBuffer* VerseBuffer::New() const {
  return new VerseBuffer;
}

void VerseBuffer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (book_ != &_default_book_) {
        book_->clear();
      }
    }
    chapter_ = 0;
    verse_ = 0;
    if (_has_bit(3)) {
      if (text_ != &_default_text_) {
        text_->clear();
      }
    }
    unique_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VerseBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string book = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_book()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->book().data(), this->book().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_chapter;
        break;
      }
      
      // required int32 chapter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_chapter:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &chapter_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_verse;
        break;
      }
      
      // required int32 verse = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_verse:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &verse_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_text;
        break;
      }
      
      // required string text = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_text:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_text()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->text().data(), this->text().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(40)) goto parse_unique_id;
        break;
      }
      
      // required int32 unique_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_unique_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &unique_id_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VerseBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    VerseBuffer::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string book = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->book().data(), this->book().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->book(), output);
  }
  
  // required int32 chapter = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chapter(), output);
  }
  
  // required int32 verse = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->verse(), output);
  }
  
  // required string text = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->text(), output);
  }
  
  // required int32 unique_id = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->unique_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VerseBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string book = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->book().data(), this->book().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->book(), target);
  }
  
  // required int32 chapter = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chapter(), target);
  }
  
  // required int32 verse = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->verse(), target);
  }
  
  // required string text = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->text(), target);
  }
  
  // required int32 unique_id = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->unique_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VerseBuffer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string book = 1;
    if (has_book()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->book());
    }
    
    // required int32 chapter = 2;
    if (has_chapter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chapter());
    }
    
    // required int32 verse = 3;
    if (has_verse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->verse());
    }
    
    // required string text = 4;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
    // required int32 unique_id = 5;
    if (has_unique_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unique_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void VerseBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VerseBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VerseBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VerseBuffer::MergeFrom(const VerseBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_book(from.book());
    }
    if (from._has_bit(1)) {
      set_chapter(from.chapter());
    }
    if (from._has_bit(2)) {
      set_verse(from.verse());
    }
    if (from._has_bit(3)) {
      set_text(from.text());
    }
    if (from._has_bit(4)) {
      set_unique_id(from.unique_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VerseBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerseBuffer::CopyFrom(const VerseBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerseBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void VerseBuffer::Swap(VerseBuffer* other) {
  if (other != this) {
    std::swap(book_, other->book_);
    std::swap(chapter_, other->chapter_);
    std::swap(verse_, other->verse_);
    std::swap(text_, other->text_);
    std::swap(unique_id_, other->unique_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VerseBuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerseBuffer_descriptor_;
  metadata.reflection = VerseBuffer_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string TranslationBuffer::_default_long_name_;
const ::std::string TranslationBuffer::_default_short_name_;
#ifndef _MSC_VER
const int TranslationBuffer::kLongNameFieldNumber;
const int TranslationBuffer::kShortNameFieldNumber;
const int TranslationBuffer::kVerseFieldNumber;
#endif  // !_MSC_VER

TranslationBuffer::TranslationBuffer() {
  SharedCtor();
}

void TranslationBuffer::InitAsDefaultInstance() {
}

TranslationBuffer::TranslationBuffer(const TranslationBuffer& from) {
  SharedCtor();
  MergeFrom(from);
}

void TranslationBuffer::SharedCtor() {
  _cached_size_ = 0;
  long_name_ = const_cast< ::std::string*>(&_default_long_name_);
  short_name_ = const_cast< ::std::string*>(&_default_short_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TranslationBuffer::~TranslationBuffer() {
  SharedDtor();
}

void TranslationBuffer::SharedDtor() {
  if (long_name_ != &_default_long_name_) {
    delete long_name_;
  }
  if (short_name_ != &_default_short_name_) {
    delete short_name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TranslationBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TranslationBuffer_descriptor_;
}

const TranslationBuffer& TranslationBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TranslationBuffer_2eproto();  return *default_instance_;
}

TranslationBuffer* TranslationBuffer::default_instance_ = NULL;

TranslationBuffer* TranslationBuffer::New() const {
  return new TranslationBuffer;
}

void TranslationBuffer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (long_name_ != &_default_long_name_) {
        long_name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (short_name_ != &_default_short_name_) {
        short_name_->clear();
      }
    }
  }
  verse_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TranslationBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string long_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_long_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->long_name().data(), this->long_name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_short_name;
        break;
      }
      
      // required string short_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_short_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_short_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->short_name().data(), this->short_name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_verse;
        break;
      }
      
      // repeated .BibleDatabase.VerseBuffer verse = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_verse:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_verse()));
        if (input->ExpectTag(26)) goto parse_verse;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TranslationBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TranslationBuffer::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string long_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->long_name().data(), this->long_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->long_name(), output);
  }
  
  // required string short_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->short_name().data(), this->short_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->short_name(), output);
  }
  
  // repeated .BibleDatabase.VerseBuffer verse = 3;
  for (int i = 0; i < this->verse_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->verse(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TranslationBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string long_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->long_name().data(), this->long_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->long_name(), target);
  }
  
  // required string short_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->short_name().data(), this->short_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->short_name(), target);
  }
  
  // repeated .BibleDatabase.VerseBuffer verse = 3;
  for (int i = 0; i < this->verse_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->verse(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TranslationBuffer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string long_name = 1;
    if (has_long_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->long_name());
    }
    
    // required string short_name = 2;
    if (has_short_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->short_name());
    }
    
  }
  // repeated .BibleDatabase.VerseBuffer verse = 3;
  total_size += 1 * this->verse_size();
  for (int i = 0; i < this->verse_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->verse(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TranslationBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TranslationBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TranslationBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TranslationBuffer::MergeFrom(const TranslationBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  verse_.MergeFrom(from.verse_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_long_name(from.long_name());
    }
    if (from._has_bit(1)) {
      set_short_name(from.short_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TranslationBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TranslationBuffer::CopyFrom(const TranslationBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranslationBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < verse_size(); i++) {
    if (!this->verse(i).IsInitialized()) return false;
  }
  return true;
}

void TranslationBuffer::Swap(TranslationBuffer* other) {
  if (other != this) {
    std::swap(long_name_, other->long_name_);
    std::swap(short_name_, other->short_name_);
    verse_.Swap(&other->verse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TranslationBuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TranslationBuffer_descriptor_;
  metadata.reflection = TranslationBuffer_reflection_;
  return metadata;
}


}  // namespace BibleDatabase
