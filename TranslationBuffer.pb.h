// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_TranslationBuffer_2eproto__INCLUDED
#define PROTOBUF_TranslationBuffer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

namespace BibleStudy {

class VerseBuffer;
class TranslationBuffer;

// ===================================================================

class VerseBuffer : public ::google::protobuf::Message {
 public:
  VerseBuffer();
  virtual ~VerseBuffer();
  
  VerseBuffer(const VerseBuffer& from);
  
  inline VerseBuffer& operator=(const VerseBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline static const VerseBuffer& default_instance() {
    return default_instance_;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _reflection_.unknown_fields();
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _reflection_.mutable_unknown_fields();
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  
  // implements Message ----------------------------------------------
  
  VerseBuffer* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Message::Reflection* GetReflection() const;
  ::google::protobuf::Message::Reflection* GetReflection();
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string book = 1;
  inline bool has_book() const;
  inline void clear_book();
  inline const ::std::string& book() const;
  inline void set_book(const ::std::string& value);
  inline void set_book(const char* value);
  inline ::std::string* mutable_book();
  
  // required int32 chapter = 2;
  inline bool has_chapter() const;
  inline void clear_chapter();
  inline ::google::protobuf::int32 chapter() const;
  inline void set_chapter(::google::protobuf::int32 value);
  
  // required int32 verse = 3;
  inline bool has_verse() const;
  inline void clear_verse();
  inline ::google::protobuf::int32 verse() const;
  inline void set_verse(::google::protobuf::int32 value);
  
  // required string text = 4;
  inline bool has_text() const;
  inline void clear_text();
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline ::std::string* mutable_text();
  
  // required int32 unique_id = 5;
  inline bool has_unique_id() const;
  inline void clear_unique_id();
  inline ::google::protobuf::int32 unique_id() const;
  inline void set_unique_id(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::internal::GeneratedMessageReflection _reflection_;
  mutable int _cached_size_;
  
  ::std::string* book_;
  static const ::std::string _default_book_;
  ::google::protobuf::int32 chapter_;
  ::google::protobuf::int32 verse_;
  ::std::string* text_;
  static const ::std::string _default_text_;
  ::google::protobuf::int32 unique_id_;
  
  static const VerseBuffer default_instance_;
  static const int _offsets_[5];
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
};
// -------------------------------------------------------------------

class TranslationBuffer : public ::google::protobuf::Message {
 public:
  TranslationBuffer();
  virtual ~TranslationBuffer();
  
  TranslationBuffer(const TranslationBuffer& from);
  
  inline TranslationBuffer& operator=(const TranslationBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline static const TranslationBuffer& default_instance() {
    return default_instance_;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _reflection_.unknown_fields();
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _reflection_.mutable_unknown_fields();
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  
  // implements Message ----------------------------------------------
  
  TranslationBuffer* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Message::Reflection* GetReflection() const;
  ::google::protobuf::Message::Reflection* GetReflection();
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string long_name = 1;
  inline bool has_long_name() const;
  inline void clear_long_name();
  inline const ::std::string& long_name() const;
  inline void set_long_name(const ::std::string& value);
  inline void set_long_name(const char* value);
  inline ::std::string* mutable_long_name();
  
  // required string short_name = 2;
  inline bool has_short_name() const;
  inline void clear_short_name();
  inline const ::std::string& short_name() const;
  inline void set_short_name(const ::std::string& value);
  inline void set_short_name(const char* value);
  inline ::std::string* mutable_short_name();
  
  // repeated .BibleStudy.VerseBuffer verse = 3;
  inline int verse_size() const;
  inline void clear_verse();
  inline const ::google::protobuf::RepeatedPtrField< ::BibleStudy::VerseBuffer >& verse() const;
  inline ::google::protobuf::RepeatedPtrField< ::BibleStudy::VerseBuffer >* mutable_verse();
  inline const ::BibleStudy::VerseBuffer& verse(int index) const;
  inline ::BibleStudy::VerseBuffer* mutable_verse(int index);
  inline ::BibleStudy::VerseBuffer* add_verse();
  
 private:
  ::google::protobuf::internal::GeneratedMessageReflection _reflection_;
  mutable int _cached_size_;
  
  ::std::string* long_name_;
  static const ::std::string _default_long_name_;
  ::std::string* short_name_;
  static const ::std::string _default_short_name_;
  ::google::protobuf::RepeatedPtrField< ::BibleStudy::VerseBuffer > verse_;
  
  static const TranslationBuffer default_instance_;
  static const int _offsets_[3];
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
};
// ===================================================================


// ===================================================================


// ===================================================================

// VerseBuffer

// required string book = 1;
inline bool VerseBuffer::has_book() const {
  return _has_bit(0);
}
inline void VerseBuffer::clear_book() {
  if (book_ != &_default_book_) {
    book_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& VerseBuffer::book() const {
  return *book_;
}
inline void VerseBuffer::set_book(const ::std::string& value) {
  _set_bit(0);
  if (book_ == &_default_book_) {
    book_ = new ::std::string;
  }
  book_->assign(value);
}
inline void VerseBuffer::set_book(const char* value) {
  _set_bit(0);
  if (book_ == &_default_book_) {
    book_ = new ::std::string;
  }
  book_->assign(value);
}
inline ::std::string* VerseBuffer::mutable_book() {
  _set_bit(0);
  if (book_ == &_default_book_) {
    book_ = new ::std::string;
  }
  return book_;
}

// required int32 chapter = 2;
inline bool VerseBuffer::has_chapter() const {
  return _has_bit(1);
}
inline void VerseBuffer::clear_chapter() {
  chapter_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 VerseBuffer::chapter() const {
  return chapter_;
}
inline void VerseBuffer::set_chapter(::google::protobuf::int32 value) {
  _set_bit(1);
  chapter_ = value;
}

// required int32 verse = 3;
inline bool VerseBuffer::has_verse() const {
  return _has_bit(2);
}
inline void VerseBuffer::clear_verse() {
  verse_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 VerseBuffer::verse() const {
  return verse_;
}
inline void VerseBuffer::set_verse(::google::protobuf::int32 value) {
  _set_bit(2);
  verse_ = value;
}

// required string text = 4;
inline bool VerseBuffer::has_text() const {
  return _has_bit(3);
}
inline void VerseBuffer::clear_text() {
  if (text_ != &_default_text_) {
    text_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& VerseBuffer::text() const {
  return *text_;
}
inline void VerseBuffer::set_text(const ::std::string& value) {
  _set_bit(3);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void VerseBuffer::set_text(const char* value) {
  _set_bit(3);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline ::std::string* VerseBuffer::mutable_text() {
  _set_bit(3);
  if (text_ == &_default_text_) {
    text_ = new ::std::string;
  }
  return text_;
}

// required int32 unique_id = 5;
inline bool VerseBuffer::has_unique_id() const {
  return _has_bit(4);
}
inline void VerseBuffer::clear_unique_id() {
  unique_id_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 VerseBuffer::unique_id() const {
  return unique_id_;
}
inline void VerseBuffer::set_unique_id(::google::protobuf::int32 value) {
  _set_bit(4);
  unique_id_ = value;
}

// -------------------------------------------------------------------

// TranslationBuffer

// required string long_name = 1;
inline bool TranslationBuffer::has_long_name() const {
  return _has_bit(0);
}
inline void TranslationBuffer::clear_long_name() {
  if (long_name_ != &_default_long_name_) {
    long_name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& TranslationBuffer::long_name() const {
  return *long_name_;
}
inline void TranslationBuffer::set_long_name(const ::std::string& value) {
  _set_bit(0);
  if (long_name_ == &_default_long_name_) {
    long_name_ = new ::std::string;
  }
  long_name_->assign(value);
}
inline void TranslationBuffer::set_long_name(const char* value) {
  _set_bit(0);
  if (long_name_ == &_default_long_name_) {
    long_name_ = new ::std::string;
  }
  long_name_->assign(value);
}
inline ::std::string* TranslationBuffer::mutable_long_name() {
  _set_bit(0);
  if (long_name_ == &_default_long_name_) {
    long_name_ = new ::std::string;
  }
  return long_name_;
}

// required string short_name = 2;
inline bool TranslationBuffer::has_short_name() const {
  return _has_bit(1);
}
inline void TranslationBuffer::clear_short_name() {
  if (short_name_ != &_default_short_name_) {
    short_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& TranslationBuffer::short_name() const {
  return *short_name_;
}
inline void TranslationBuffer::set_short_name(const ::std::string& value) {
  _set_bit(1);
  if (short_name_ == &_default_short_name_) {
    short_name_ = new ::std::string;
  }
  short_name_->assign(value);
}
inline void TranslationBuffer::set_short_name(const char* value) {
  _set_bit(1);
  if (short_name_ == &_default_short_name_) {
    short_name_ = new ::std::string;
  }
  short_name_->assign(value);
}
inline ::std::string* TranslationBuffer::mutable_short_name() {
  _set_bit(1);
  if (short_name_ == &_default_short_name_) {
    short_name_ = new ::std::string;
  }
  return short_name_;
}

// repeated .BibleStudy.VerseBuffer verse = 3;
inline int TranslationBuffer::verse_size() const {
  return verse_.size();
}
inline void TranslationBuffer::clear_verse() {
  verse_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::BibleStudy::VerseBuffer >&
TranslationBuffer::verse() const {
  return verse_;
}
inline ::google::protobuf::RepeatedPtrField< ::BibleStudy::VerseBuffer >*
TranslationBuffer::mutable_verse() {
  return &verse_;
}
inline const ::BibleStudy::VerseBuffer& TranslationBuffer::verse(int index) const {
  return verse_.Get(index);
}
inline ::BibleStudy::VerseBuffer* TranslationBuffer::mutable_verse(int index) {
  return verse_.Mutable(index);
}
inline ::BibleStudy::VerseBuffer* TranslationBuffer::add_verse() {
  return verse_.Add();
}


}  // namespace BibleStudy
#endif  // PROTOBUF_TranslationBuffer_2eproto__INCLUDED
